import bpy

# –£–∫–∞–∂–∏ –∏–º–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–≤
source_name = "Genesis 8 Female Eyelashes Mesh.001"  # –º–µ—à, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç shape key
MESH_NAME = "Genesis 8 Female Eyelashes Mesh"  # –º–µ—à, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–∏–º shape key

# –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
source = bpy.data.objects.get(source_name)
target = bpy.data.objects.get(MESH_NAME)

key_words=['None']# —É–∫–∞–∂–∏—Ç–µ, –ø–æ –∫–∞–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥—Ä–∞–π–≤–µ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏–ø–∏—Å–∫–∞ facs, PBM, eCTRL

def cleanup(rigpointer):
    rig = rigpointer
    mesh = bpy.data.objects.get(MESH_NAME)

    if not rig or not mesh:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∏–≥ –∏–ª–∏ –º–µ—à. –ü—Ä–æ–≤–µ—Ä—å –∏–º–µ–Ω–∞ –æ–±—ä–µ–∫—Ç–æ–≤.")
        return

    #–û–±–Ω—É–ª—è–µ–º —à–µ–π–ø –∫–µ–∏
    for shape in mesh.data.shape_keys.key_blocks:
        
        print(f"- {shape.name}: {shape.value}")
        if type(shape.value)==float:
            shape.value = 0.0
        elif type(shape.value)==int:
            shape.value = 0
        else:
            continue
    #–û–±–Ω—É–ª—è–µ–º –¥—Ä–∞–π–≤–µ—Ä–∞
    for prop_name, prop_value in rig.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "_RNA_UI")
        if prop_name == "_RNA_UI":
            continue
                
        
        if type(rig[prop_name])==float:
            rig[prop_name] = 0.0
        elif type(rig[prop_name])==int:
            rig[prop_name] = 0
        else:
            continue
    
    bpy.context.view_layer.update()
        
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã
    for obj in bpy.data.objects:
        if obj.animation_data and obj.animation_data.drivers:
            for fcurve in obj.animation_data.drivers:
                fcurve.update()

    print("üéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

mesh = bpy.data.objects.get(MESH_NAME)

def save_shape_keys_from_rig(source_obj, target_obj):
    rig = bpy.context.active_object
    if not rig or rig.type != 'ARMATURE':
        print("–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∏–≥–æ–º.")
        return

    # –û–±–Ω—É–ª—è–µ–º –≤—Å—ë –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    cleanup(rig)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∏–≥–∞
    armature_mod = next((m for m in source_obj.modifiers if m.type == 'ARMATURE'), None)
    if not armature_mod:
        print(f"–£ –æ–±—ä–µ–∫—Ç–∞ '{source_obj.name}' –Ω–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∏–≥–∞.")
        return

    def update_scene():
        for obj in bpy.data.objects:
            if obj.animation_data and obj.animation_data.drivers:
                for fcurve in obj.animation_data.drivers:
                    fcurve.update()

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ä–∏–≥–∞
    for prop_name, value in rig.items():
        
        if key_words[0]=='None':
            pass
        elif any(p in prop_name for p in key_words):
            pass
        else:
            continue
        
        if isinstance(value, (int, float)):
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞: {prop_name}")

            if type(rig[prop_name])==float:
                rig[prop_name] = 1.0
            elif type(rig[prop_name])==int:
                rig[prop_name] = 1
                
            update_scene()

            # –ü—Ä–∏–º–µ–Ω—è–µ–º join as shape key
            bpy.ops.object.select_all(action='DESELECT')
            source_obj.select_set(True)
            target_obj.select_set(True)
            bpy.context.view_layer.objects.active = target_obj

            bpy.ops.object.join_shapes()
            
            sk = target.data.shape_keys.key_blocks[-1]
            sk.name = prop_name
            
            
            print(f"‚úÖ Shape key –∏–∑ '{source_obj.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ '{target_obj.name}'")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            if type(rig[prop_name])==float:
                rig[prop_name] = 0.0
            elif type(rig[prop_name])==int:
                rig[prop_name] = 0
                
            update_scene()
        
        

    print("üéâ –í—Å–µ –¥—Ä–∞–π–≤–µ—Ä–∞ –∑–∞–ø–∏—Å–∞–Ω—ã!")


# –í—ã–∑–æ–≤
if source and target:
    save_shape_keys_from_rig(source, target)
else:
    print("‚ùå –û–¥–∏–Ω –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
